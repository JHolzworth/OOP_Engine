package neumont.edu.csc150.levels;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.JButton;

import neumont.edu.csc150.enemies.FlickeringEnemy;
import neumont.edu.csc150.enemy.Enemy;
import neumont.edu.csc150.level.Level;
import neumont.edu.csc150.player.Player;
import neumont.edu.csc150.player.achievement.Achievement;

public class BasicLevel extends Level{

	private static Image icon = getBasicIcon();
	private static int x = 500;
	private static int y = 500;
	private static int width = 1000;
	private static int height = 1000;
	public BasicLevel() {
		super(x,y,width,height,icon,"Tutorial","Flickering",getEnemies());
		init();
	}
	
	private void init(){
		setAchievements();
	}

	protected void paintBackground(Graphics g) {
		g.setColor(Color.white);
		g.fillRect(0,0, width, height);
	}

	protected void paintForeground(Graphics g) {
		if(!gameOver){
			g.setColor(Color.black);
			g.drawString("Collect all blinking dots...", 450, 25);
			g.drawString("Wait until they blink.", 450, 50);
		}else{
			g.setColor(Color.black);
			g.drawString("They blink red then green, wait until they are green to obtain them.",450,25);
		}
	}

	private static Image getBasicIcon(){
		try {
			return ImageIO.read(new File("C:\\Users\\Joshua\\Desktop\\basicLevel.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static Collection<Enemy> getEnemies(){
		Collection<Enemy> enemies = new ArrayList<Enemy>();
		enemies.add(new FlickeringEnemy(500, 500, 25, 1));
		return enemies;
	}
	
	private void setAchievements(){
		try {
			achievements.add(new Achievement("Check",ImageIO.read(new File("C:\\Users\\Joshua\\Desktop\\basicLevel.png"))));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	protected void setUpPlayer(Player p){
		p.setLocation(new Point(0,0));
	}
	public void subReset(){
		enemies = getEnemies();
	}
	
	public boolean levelComplete(){
		return enemies.size()==0;
	}
	
	public void subCompletion(){
		this.completed(new Date());
		completed();
	}
	
	public void gameOver(){
		Thread waiter = new Thread(new Runnable(){
			public void run(){
				waiter.sleep(3000);
			}
		});
	}
}
